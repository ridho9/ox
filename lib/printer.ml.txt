open Ast

let eval_unop unop = match unop with Bang -> "!" | Minus -> "-"

let eval_binop op =
  match op with
  | Multiply -> "*"
  | Divide -> "/"
  | Plus -> "+"
  | Subtract -> "-"
  | Greater -> ">"
  | GreaterEq -> ">="
  | Less -> "<"
  | LessEq -> "<="
  | EqEq -> "=="
  | BangEq -> "!="

let rec eval expr =
  match expr.expr with
  | Nil -> ""
  | Int i -> string_of_int i
  | Bool b -> string_of_bool b
  | Unary (op, e) ->
      let op = eval_unop op in
      let e = eval e in
      Printf.sprintf "%s%s" op e
  | Binop (op, e1, e2) ->
      let op = eval_binop op in
      let e1 = eval e1 in
      let e2 = eval e2 in
      Printf.sprintf "%s %s %s" e1 op e2
